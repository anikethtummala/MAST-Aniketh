{
  "run_id": 14,
  "prompt": "write a function to calculate compound interest over time",
  "content": "2025-01-17 11:33:16.868 | INFO     | metagpt.roles.role:_act:391 - Alice(SimpleCoder): to do SimpleWriteCode(SimpleWriteCode)\n```python\ndef calculate_compound_interest(principal, rate, time, n):\n    \"\"\"\n    Calculate compound interest over time.\n    Parameters:\n    principal (float): The initial amount of money.\n    rate (float): The annual interest rate (as a decimal).\n    time (int): The time the money is invested for, in years.\n    n (int): The number of times that interest is compounded per year.\n    Returns:\n    float: The amount of money accumulated after 'time' years, including interest.\n    \"\"\"\n    amount = principal * (1 + rate / n) ** (n * time)\n    return amount\n```\n2025-01-17 11:33:20.034 | INFO     | __main__:_act:85 - Bob(SimpleTester): to do SimpleWriteTest(SimpleWriteTest)\n```python\nimport pytest\nfrom your_module import calculate_compound_interest\ndef test_calculate_compound_interest_simple_case():\n    assert calculate_compound_interest(1000, 0.05, 1, 1) == pytest.approx(1050.0)\ndef test_calculate_compound_interest_compounded_quarterly():\n    assert calculate_compound_interest(1000, 0.05, 1, 4) == pytest.approx(1050.9453369140627)\ndef test_calculate_compound_interest_zero_time():\n    assert calculate_compound_interest(1000, 0.05, 0, 4) == 1000\ndef test_calculate_compound_interest_zero_principal():\n    assert calculate_compound_interest(0, 0.05, 1, 4) == 0\ndef test_calculate_compound_interest_high_compound_rate():\n    assert calculate_compound_interest(1000, 0.05, 1, 365) == pytest.approx(1051.2674964675485)\n```\n2025-01-17 11:33:29.686 | INFO     | metagpt.roles.role:_act:391 - Charlie(SimpleReviewer): to do SimpleWriteReview(SimpleWriteReview)\n2025-01-17 11:33:33.728 | INFO     | __main__:_act:85 - Bob(SimpleTester): to do SimpleWriteTest(SimpleWriteTest)\n```python\nimport pytest\nfrom your_module import calculate_compound_interest\ndef test_negative_principal():\n    with pytest.raises(ValueError):\n        calculate_compound_interest(-1000, 0.05, 1, 4)\ndef test_negative_rate():\n    with pytest.raises(ValueError):\n        calculate_compound_interest(1000, -0.05, 1, 4)\ndef test_negative_time():\n    with pytest.raises(ValueError):\n        calculate_compound_interest(1000, 0.05, -1, 4)\ndef test_negative_compound_rate():\n    with pytest.raises(ValueError):\n        calculate_compound_interest(1000, 0.05, 1, -4)\ndef test_zero_rate():\n    assert calculate_compound_interest(1000, 0, 1, 4) == 1000\n```\n2025-01-17 11:33:38.184 | INFO     | metagpt.roles.role:_act:391 - Charlie(SimpleReviewer): to do SimpleWriteReview(SimpleWriteReview)",
  "timestamp": "2025-01-17 11:33:16",
  "cost": 0.044,
  "log_file": "logs/14.txt"
}