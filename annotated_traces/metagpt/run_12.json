{
  "run_id": 12,
  "prompt": "write a program to generate random secure passwords",
  "content": "2025-01-17 11:33:08.698 | INFO     | metagpt.roles.role:_act:391 - Alice(SimpleCoder): to do SimpleWriteCode(SimpleWriteCode)\n```python\nimport random\nimport string\ndef generate_secure_password(length=12):\n    characters = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(characters) for i in range(length))\n    return password\n```\n2025-01-17 11:33:10.592 | INFO     | __main__:_act:85 - Bob(SimpleTester): to do SimpleWriteTest(SimpleWriteTest)\n```python\nimport pytest\nfrom your_module import generate_secure_password  # Assuming the function is in 'your_module.py'\ndef test_default_length():\n    assert len(generate_secure_password()) == 12\ndef test_custom_length():\n    for length in [8, 16, 24, 32]:\n        assert len(generate_secure_password(length)) == length\ndef test_contains_uppercase():\n    password = generate_secure_password(20)\n    assert any(c.isupper() for c in password)\ndef test_contains_lowercase():\n    password = generate_secure_password(20)\n    assert any(c.islower() for c in password)\ndef test_contains_digit():\n    password = generate_secure_password(20)\n    assert any(c.isdigit() for c in password)\ndef test_contains_special_char():\n    password = generate_secure_password(20)\n    special_chars = set(string.punctuation)\n    assert any(c in special_chars for c in password)\n```\n2025-01-17 11:33:14.603 | INFO     | metagpt.roles.role:_act:391 - Charlie(SimpleReviewer): to do SimpleWriteReview(SimpleWriteReview)\n2025-01-17 11:33:18.552 | INFO     | __main__:_act:85 - Bob(SimpleTester): to do SimpleWriteTest(SimpleWriteTest)\n```python\nimport pytest\nfrom your_module import generate_secure_password  # Assuming the function is in 'your_module.py'\nimport string\ndef test_default_length():\n    assert len(generate_secure_password()) == 12\ndef test_custom_length():\n    for length in [8, 16, 24, 32]:\n        assert len(generate_secure_password(length)) == length\ndef test_contains_uppercase():\n    password = generate_secure_password(20)\n    assert any(c.isupper() for c in password)\ndef test_contains_lowercase():\n    password = generate_secure_password(20)\n    assert any(c.islower() for c in password)\ndef test_contains_digit():\n    password = generate_secure_password(20)\n    assert any(c.isdigit() for c in password)\ndef test_contains_special_char():\n    password = generate_secure_password(20)\n    special_chars = set(string.punctuation)\n    assert any(c in special_chars for c in password)\ndef test_randomness():\n    passwords = set(generate_secure_password(12) for _ in range(10))\n    assert len(passwords) == 10\n```\n2025-01-17 11:33:24.709 | INFO     | metagpt.roles.role:_act:391 - Charlie(SimpleReviewer): to do SimpleWriteReview(SimpleWriteReview)",
  "timestamp": "2025-01-17 11:33:08",
  "cost": 0.039,
  "log_file": "logs/12.txt"
}