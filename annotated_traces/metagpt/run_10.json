{
  "run_id": 10,
  "prompt": "develop a program to convert text files to PDF",
  "content": "2025-01-17 11:32:58.489 | INFO     | metagpt.roles.role:_act:391 - Alice(SimpleCoder): to do SimpleWriteCode(SimpleWriteCode)\n```python\nfrom fpdf import FPDF\ndef text_to_pdf(text_file, pdf_file):\n    pdf = FPDF()\n    pdf.add_page()\n    pdf.set_font(\"Arial\", size=12)\n    with open(text_file, 'r') as file:\n        for line in file:\n            pdf.cell(0, 10, line, ln=True)\n    pdf.output(pdf_file)\n# Example usage:\n# text_to_pdf('your_text_file.txt', 'output_pdf_file.pdf')\n```\n2025-01-17 11:33:02.556 | INFO     | __main__:_act:85 - Bob(SimpleTester): to do SimpleWriteTest(SimpleWriteTest)\n```python\nimport pytest\nimport os\nfrom fpdf import FPDF\n# Assuming the function text_to_pdf is imported correctly\ndef test_text_to_pdf_creates_file():\n    text_to_pdf('test_file.txt', 'test_output.pdf')\n    assert os.path.isfile('test_output.pdf') == True\ndef test_text_to_pdf_with_empty_file():\n    with open('empty_file.txt', 'w') as file:\n        pass\n    text_to_pdf('empty_file.txt', 'empty_output.pdf')\n    assert os.path.getsize('empty_output.pdf') > 0\ndef test_text_to_pdf_content_check():\n    with open('content_check.txt', 'w') as file:\n        file.write(\"This is a test.\")\n    text_to_pdf('content_check.txt', 'content_output.pdf')\n    # This test assumes the PDF can be read back, which requires additional libraries not covered here.\n    # Normally, you would check if the content matches the expected output.\n    assert os.path.getsize('content_output.pdf') > 0\ndef test_text_to_pdf_overwrite_existing_pdf():\n    with open('overwrite_test.txt', 'w') as file:\n        file.write(\"Initial content.\")\n    text_to_pdf('overwrite_test.txt', 'overwrite_output.pdf')\n    initial_size = os.path.getsize('overwrite_output.pdf')\n    with open('overwrite_test.txt', 'w') as file:\n        file.write(\"New content that is longer than the initial content.\")\n    text_to_pdf('overwrite_test.txt', 'overwrite_output.pdf')\n    new_size = os.path.getsize('overwrite_output.pdf')\n    assert new_size > initial_size\ndef test_text_to_pdf_nonexistent_text_file():\n    with pytest.raises(FileNotFoundError):\n        text_to_pdf('nonexistent_file.txt', 'should_fail.pdf')\n```\n2025-01-17 11:33:14.756 | INFO     | metagpt.roles.role:_act:391 - Charlie(SimpleReviewer): to do SimpleWriteReview(SimpleWriteReview)\n2025-01-17 11:33:21.635 | INFO     | __main__:_act:85 - Bob(SimpleTester): to do SimpleWriteTest(SimpleWriteTest)\n```python\nimport pytest\nimport os\n# Assuming the function text_to_pdf is imported correctly\n@pytest.fixture(autouse=True)\ndef run_around_tests():\n    # Setup code before each test\n    yield\n    # Teardown code after each test\n    for file in os.listdir('.'):\n        if file.endswith('.pdf') or file.endswith('.txt'):\n            os.remove(file)\ndef test_text_to_pdf_creates_file():\n    text_to_pdf('test_file.txt', 'test_output.pdf')\n    assert os.path.isfile('test_output.pdf')\ndef test_text_to_pdf_with_empty_file():\n    with open('empty_file.txt', 'w') as file:\n        pass\n    text_to_pdf('empty_file.txt', 'empty_output.pdf')\n    assert os.path.getsize('empty_output.pdf') > 0\ndef test_text_to_pdf_content_check():\n    with open('content_check.txt', 'w') as file:\n        file.write(\"This is a test.\")\n    text_to_pdf('content_check.txt', 'content_output.pdf')\n    assert os.path.getsize('content_output.pdf') > 0\ndef test_text_to_pdf_overwrite_existing_pdf():\n    with open('overwrite_test.txt', 'w') as file:\n        file.write(\"Initial content.\")\n    text_to_pdf('overwrite_test.txt', 'overwrite_output.pdf')\n    initial_size = os.path.getsize('overwrite_output.pdf')\n    with open('overwrite_test.txt', 'w') as file:\n        file.write(\"New content that is longer than the initial content.\")\n    text_to_pdf('overwrite_test.txt', 'overwrite_output.pdf')\n    new_size = os.path.getsize('overwrite_output.pdf')\n    assert new_size > initial_size\ndef test_text_to_pdf_nonexistent_text_file():\n    with pytest.raises(FileNotFoundError):\n        text_to_pdf('nonexistent_file.txt', 'should_fail.pdf')\n```\n2025-01-17 11:33:31.889 | INFO     | metagpt.roles.role:_act:391 - Charlie(SimpleReviewer): to do SimpleWriteReview(SimpleWriteReview)",
  "timestamp": "2025-01-17 11:32:58",
  "cost": 0.062,
  "log_file": "logs/10.txt"
}