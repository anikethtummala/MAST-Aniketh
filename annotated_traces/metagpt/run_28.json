{
  "run_id": 28,
  "prompt": "develop a program that generates a custom QR code for a URL",
  "content": "2025-01-17 11:39:51.916 | INFO     | metagpt.roles.role:_act:391 - Alice(SimpleCoder): to do SimpleWriteCode(SimpleWriteCode)\n```python\nimport qrcode\ndef generate_qr_code(url):\n    qr = qrcode.QRCode(\n        version=1,\n        error_correction=qrcode.constants.ERROR_CORRECT_L,\n        box_size=10,\n        border=4,\n    )\n    qr.add_data(url)\n    qr.make(fit=True)\n    img = qr.make_image(fill_color=\"black\", back_color=\"white\")\n    img.save(\"custom_qr_code.png\")\n# Example usage\ngenerate_qr_code(\"https://www.example.com\")\n```\n2025-01-17 11:39:56.261 | INFO     | __main__:_act:85 - Bob(SimpleTester): to do SimpleWriteTest(SimpleWriteTest)\n```python\nimport pytest\nfrom io import BytesIO\nfrom PIL import Image\nfrom your_module import generate_qr_code  # Assuming the function is in a module named your_module\nimport os\ndef test_generate_qr_code_file_exists():\n    url = \"https://www.example.com\"\n    generate_qr_code(url)\n    assert os.path.isfile(\"custom_qr_code.png\")\ndef test_generate_qr_code_file_not_empty():\n    url = \"https://www.example.com\"\n    generate_qr_code(url)\n    assert os.path.getsize(\"custom_qr_code.png\") > 0\ndef test_generate_qr_code_is_png():\n    url = \"https://www.example.com\"\n    generate_qr_code(url)\n    assert \"custom_qr_code.png\".endswith('.png')\ndef test_generate_qr_code_can_be_opened():\n    url = \"https://www.example.com\"\n    generate_qr_code(url)\n    img = Image.open(\"custom_qr_code.png\")\n    assert img is not None\ndef test_generate_qr_code_valid_qr_code():\n    url = \"https://www.example.com\"\n    generate_qr_code(url)\n    img = Image.open(\"custom_qr_code.png\")\n    img_bytes = BytesIO()\n    img.save(img_bytes, format='PNG')\n    img_bytes.seek(0)\n    # Assuming there's a function to validate QR codes, which is not provided here.\n    # This test would ideally decode the QR code and check if it matches the URL.\n    # For the sake of this example, let's assume it's valid.\n    assert True  # Replace with actual validation logic\n```\n2025-01-17 11:40:05.382 | INFO     | metagpt.roles.role:_act:391 - Charlie(SimpleReviewer): to do SimpleWriteReview(SimpleWriteReview)\n2025-01-17 11:40:14.138 | INFO     | __main__:_act:85 - Bob(SimpleTester): to do SimpleWriteTest(SimpleWriteTest)\n```python\nimport pytest\nfrom io import BytesIO\nfrom PIL import Image\nimport qrcode\nfrom your_module import generate_qr_code  # Assuming the function is in a module named your_module\nimport os\ndef test_generate_qr_code_file_exists():\n    url = \"https://www.example.com\"\n    generate_qr_code(url)\n    assert os.path.isfile(\"custom_qr_code.png\")\ndef test_generate_qr_code_file_not_empty():\n    url = \"https://www.example.com\"\n    generate_qr_code(url)\n    assert os.path.getsize(\"custom_qr_code.png\") > 0\ndef test_generate_qr_code_is_png():\n    url = \"https://www.example.com\"\n    generate_qr_code(url)\n    assert \"custom_qr_code.png\".endswith('.png')\ndef test_generate_qr_code_can_be_opened():\n    url = \"https://www.example.com\"\n    generate_qr_code(url)\n    img = Image.open(\"custom_qr_code.png\")\n    assert img is not None\ndef test_generate_qr_code_valid_qr_code():\n    url = \"https://www.example.com\"\n    generate_qr_code(url)\n    img = Image.open(\"custom_qr_code.png\")\n    # Convert the image to a QR code object\n    qr = qrcode.QRCode()\n    qr.add_data(url)\n    qr.make(fit=True)\n    expected_img = qr.make_image(fill_color=\"black\", back_color=\"white\")\n    expected_img_bytes = BytesIO()\n    expected_img.save(expected_img_bytes, format='PNG')\n    expected_img_bytes.seek(0)\n    generated_img_bytes = BytesIO()\n    img.save(generated_img_bytes, format='PNG')\n    generated_img_bytes.seek(0)\n    # Compare the bytes of the expected QR code with the generated one\n    assert generated_img_bytes.getvalue() == expected_img_bytes.getvalue()\n```\n2025-01-17 11:40:23.660 | INFO     | metagpt.roles.role:_act:391 - Charlie(SimpleReviewer): to do SimpleWriteReview(SimpleWriteReview)",
  "timestamp": "2025-01-17 11:39:51",
  "cost": 0.069,
  "log_file": "logs/28.txt"
}