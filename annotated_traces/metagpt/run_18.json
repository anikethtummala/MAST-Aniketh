{
  "run_id": 18,
  "prompt": "create a contact book application with add, remove, and search functionalities",
  "content": "2025-01-17 11:33:36.208 | INFO     | metagpt.roles.role:_act:391 - Alice(SimpleCoder): to do SimpleWriteCode(SimpleWriteCode)\n```python\nclass ContactBook:\n    def __init__(self):\n        self.contacts = {}\n    def add_contact(self, name, phone):\n        if name in self.contacts:\n            print(f\"{name} already exists in the contact book.\")\n        else:\n            self.contacts[name] = phone\n            print(f\"{name} added successfully.\")\n    def remove_contact(self, name):\n        if name in self.contacts:\n            del self.contacts[name]\n            print(f\"{name} removed successfully.\")\n        else:\n            print(f\"{name} does not exist in the contact book.\")\n    def search_contact(self, name):\n        if name in self.contacts:\n            print(f\"{name}: {self.contacts[name]}\")\n        else:\n            print(f\"{name} not found in the contact book.\")\n# Example usage\ncontact_book = ContactBook()\ncontact_book.add_contact(\"John Doe\", \"123-456-7890\")\ncontact_book.add_contact(\"Jane Doe\", \"098-765-4321\")\ncontact_book.search_contact(\"John Doe\")\ncontact_book.remove_contact(\"Jane Doe\")\ncontact_book.search_contact(\"Jane Doe\")\n```\n2025-01-17 11:33:42.479 | INFO     | __main__:_act:85 - Bob(SimpleTester): to do SimpleWriteTest(SimpleWriteTest)\n```python\nimport pytest\nfrom your_module import ContactBook  # Assuming the ContactBook class is in a module named your_module\ndef test_add_contact():\n    cb = ContactBook()\n    cb.add_contact(\"Alice\", \"111-222-3333\")\n    assert \"Alice\" in cb.contacts\n    assert cb.contacts[\"Alice\"] == \"111-222-3333\"\ndef test_add_existing_contact():\n    cb = ContactBook()\n    cb.add_contact(\"Bob\", \"444-555-6666\")\n    with pytest.raises(Exception):\n        cb.add_contact(\"Bob\", \"444-555-6666\")\ndef test_remove_contact():\n    cb = ContactBook()\n    cb.add_contact(\"Charlie\", \"777-888-9999\")\n    cb.remove_contact(\"Charlie\")\n    assert \"Charlie\" not in cb.contacts\ndef test_remove_nonexistent_contact():\n    cb = ContactBook()\n    with pytest.raises(Exception):\n        cb.remove_contact(\"Nonexistent\")\ndef test_search_contact():\n    cb = ContactBook()\n    cb.add_contact(\"Diana\", \"000-111-2222\")\n    assert cb.search_contact(\"Diana\") == \"Diana: 000-111-2222\"\n```\n2025-01-17 11:33:50.037 | INFO     | metagpt.roles.role:_act:391 - Charlie(SimpleReviewer): to do SimpleWriteReview(SimpleWriteReview)\n2025-01-17 11:33:56.103 | INFO     | __main__:_act:85 - Bob(SimpleTester): to do SimpleWriteTest(SimpleWriteTest)\n```python\nimport pytest\nfrom io import StringIO\nimport sys\n# Assuming the ContactBook class is in a module named your_module\nfrom your_module import ContactBook\ndef test_add_contact_success():\n    contact_book = ContactBook()\n    capturedOutput = StringIO()\n    sys.stdout = capturedOutput\n    contact_book.add_contact(\"Alice\", \"111-222-3333\")\n    sys.stdout = sys.__stdout__\n    assert \"Alice added successfully.\" in capturedOutput.getvalue()\ndef test_add_contact_failure():\n    contact_book = ContactBook()\n    contact_book.add_contact(\"Bob\", \"444-555-6666\")\n    capturedOutput = StringIO()\n    sys.stdout = capturedOutput\n    contact_book.add_contact(\"Bob\", \"444-555-6666\")\n    sys.stdout = sys.__stdout__\n    assert \"Bob already exists in the contact book.\" in capturedOutput.getvalue()\ndef test_remove_contact_success():\n    contact_book = ContactBook()\n    contact_book.add_contact(\"Charlie\", \"777-888-9999\")\n    capturedOutput = StringIO()\n    sys.stdout = capturedOutput\n    contact_book.remove_contact(\"Charlie\")\n    sys.stdout = sys.__stdout__\n    assert \"Charlie removed successfully.\" in capturedOutput.getvalue()\ndef test_remove_contact_failure():\n    contact_book = ContactBook()\n    capturedOutput = StringIO()\n    sys.stdout = capturedOutput\n    contact_book.remove_contact(\"Nonexistent\")\n    sys.stdout = sys.__stdout__\n    assert \"Nonexistent does not exist in the contact book.\" in capturedOutput.getvalue()\ndef test_search_contact():\n    contact_book = ContactBook()\n    contact_book.add_contact(\"Diana\", \"000-111-2222\")\n    capturedOutput = StringIO()\n    sys.stdout = capturedOutput\n    contact_book.search_contact(\"Diana\")\n    sys.stdout = sys.__stdout__\n    assert \"Diana: 000-111-2222\" in capturedOutput.getvalue()\n```\n2025-01-17 11:34:05.467 | INFO     | metagpt.roles.role:_act:391 - Charlie(SimpleReviewer): to do SimpleWriteReview(SimpleWriteReview)",
  "timestamp": "2025-01-17 11:33:36",
  "cost": 0.068,
  "log_file": "logs/18.txt"
}