{
  "run_id": 11,
  "prompt": "create a program that encrypts and decrypts text using a simple cipher",
  "content": "2025-01-17 11:33:03.607 | INFO     | metagpt.roles.role:_act:391 - Alice(SimpleCoder): to do SimpleWriteCode(SimpleWriteCode)\n```python\ndef simple_cipher(text, key, mode='encrypt'):\n    \"\"\"\n    Encrypts or decrypts a text using a simple Caesar cipher.\n    :param text: The text to be encrypted or decrypted.\n    :param key: The key to use for the cipher. Must be an integer.\n    :param mode: 'encrypt' or 'decrypt'. Determines the operation mode.\n    :return: The encrypted or decrypted text.\n    \"\"\"\n    if not isinstance(key, int):\n        raise ValueError(\"Key must be an integer.\")\n    if mode not in ['encrypt', 'decrypt']:\n        raise ValueError(\"Mode must be 'encrypt' or 'decrypt'.\")\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            shift = key if mode == 'encrypt' else -key\n            char_code = ord(char) + shift\n            if char.islower():\n                if char_code > ord('z'):\n                    char_code -= 26\n                elif char_code < ord('a'):\n                    char_code += 26\n            elif char.isupper():\n                if char_code > ord('Z'):\n                    char_code -= 26\n                elif char_code < ord('A'):\n                    char_code += 26\n            result += chr(char_code)\n        else:\n            result += char\n    return result\n```\n2025-01-17 11:33:10.378 | INFO     | __main__:_act:85 - Bob(SimpleTester): to do SimpleWriteTest(SimpleWriteTest)\n```python\nimport pytest\nfrom simple_coder import simple_cipher\ndef test_encrypt_lowercase():\n    assert simple_cipher(\"abc\", 3) == \"def\", \"Should encrypt lowercase letters\"\ndef test_decrypt_lowercase():\n    assert simple_cipher(\"def\", 3, 'decrypt') == \"abc\", \"Should decrypt to lowercase letters\"\ndef test_encrypt_with_non_alpha():\n    assert simple_cipher(\"abc 123\", 3) == \"def 123\", \"Should ignore non-alphabetical characters\"\ndef test_encrypt_uppercase():\n    assert simple_cipher(\"ABC\", 3) == \"DEF\", \"Should encrypt uppercase letters\"\ndef test_wraparound():\n    assert simple_cipher(\"xyz\", 3) == \"abc\", \"Should wrap around from z to a\"\n```\n2025-01-17 11:33:15.096 | INFO     | metagpt.roles.role:_act:391 - Charlie(SimpleReviewer): to do SimpleWriteReview(SimpleWriteReview)\n2025-01-17 11:33:18.908 | INFO     | __main__:_act:85 - Bob(SimpleTester): to do SimpleWriteTest(SimpleWriteTest)\n```python\nimport pytest\nfrom simple_coder import simple_cipher\ndef test_decrypt_uppercase():\n    assert simple_cipher(\"DEF\", 3, 'decrypt') == \"ABC\", \"Should decrypt uppercase letters\"\ndef test_encrypt_special_characters():\n    assert simple_cipher(\"!@#$%\", 2) == \"!@#$%\", \"Should not alter special characters\"\ndef test_decrypt_with_non_alpha():\n    assert simple_cipher(\"def 123\", 3, 'decrypt') == \"abc 123\", \"Should ignore non-alphabetical characters during decryption\"\ndef test_encrypt_empty_string():\n    assert simple_cipher(\"\", 5) == \"\", \"Should return an empty string when input is empty\"\ndef test_decrypt_empty_string():\n    assert simple_cipher(\"\", 5, 'decrypt') == \"\", \"Should return an empty string when input is empty for decryption\"\n```\n2025-01-17 11:33:24.225 | INFO     | metagpt.roles.role:_act:391 - Charlie(SimpleReviewer): to do SimpleWriteReview(SimpleWriteReview)",
  "timestamp": "2025-01-17 11:33:03",
  "cost": 0.049,
  "log_file": "logs/11.txt"
}