{
  "run_id": 24,
  "prompt": "build a program to simulate Conway's Game of Life",
  "content": "2025-01-17 11:40:12.144 | INFO     | metagpt.roles.role:_act:391 - Alice(SimpleCoder): to do SimpleWriteCode(SimpleWriteCode)\n```python\ndef game_of_life(board):\n    def count_neighbors(x, y):\n        return sum(\n            alive(board, x + dx, y + dy)\n            for dx in (-1, 0, 1)\n            for dy in (-1, 0, 1)\n            if (dx, dy) != (0, 0)\n        )\n    def alive(board, x, y):\n        if 0 <= x < len(board) and 0 <= y < len(board[0]):\n            return board[x][y]\n        return 0\n    def next_state(board):\n        new_board = [[0 for _ in range(len(board[0]))] for _ in range(len(board))]\n        for x in range(len(board)):\n            for y in range(len(board[0])):\n                neighbors = count_neighbors(x, y)\n                if board[x][y]:\n                    if neighbors in (2, 3):\n                        new_board[x][y] = 1\n                    else:\n                        new_board[x][y] = 0\n                else:\n                    if neighbors == 3:\n                        new_board[x][y] = 1\n        return new_board\n    return next_state(board)\n# Example usage\nif __name__ == \"__main__\":\n    initial_board = [\n        [0, 1, 0],\n        [0, 0, 1],\n        [1, 1, 1],\n        [0, 0, 0],\n    ]\n    print(\"Initial State:\")\n    for row in initial_board:\n        print(row)\n    next_board = game_of_life(initial_board)\n    print(\"\\nNext State:\")\n    for row in next_board:\n        print(row)\n```\n2025-01-17 11:40:20.548 | INFO     | __main__:_act:85 - Bob(SimpleTester): to do SimpleWriteTest(SimpleWriteTest)\n```python\nimport pytest\nfrom your_module import game_of_life  # Assuming the function is in 'your_module.py'\ndef test_empty_board():\n    board = [[0, 0], [0, 0]]\n    expected = [[0, 0], [0, 0]]\n    assert game_of_life(board) == expected\ndef test_stable_structure():\n    board = [\n        [0, 1, 0],\n        [0, 0, 1],\n        [1, 1, 1]\n    ]\n    expected = [\n        [0, 1, 1],\n        [1, 1, 1],\n        [0, 1, 0]\n    ]\n    assert game_of_life(board) == expected\ndef test_oscillator():\n    board = [\n        [0, 1, 0],\n        [0, 1, 0],\n        [0, 1, 0]\n    ]\n    expected = [\n        [0, 0, 0],\n        [1, 1, 1],\n        [0, 0, 0]\n    ]\n    assert game_of_life(board) == expected\ndef test_block_structure():\n    board = [\n        [1, 1],\n        [1, 1]\n    ]\n    expected = [\n        [1, 1],\n        [1, 1]\n    ]\n    assert game_of_life(board) == expected\ndef test_lonely_cell_dies():\n    board = [\n        [0, 0, 0],\n        [0, 1, 0],\n        [0, 0, 0]\n    ]\n    expected = [\n        [0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0]\n    ]\n    assert game_of_life(board) == expected\n```\n2025-01-17 11:40:30.200 | INFO     | metagpt.roles.role:_act:391 - Charlie(SimpleReviewer): to do SimpleWriteReview(SimpleWriteReview)\n2025-01-17 11:40:34.514 | INFO     | __main__:_act:85 - Bob(SimpleTester): to do SimpleWriteTest(SimpleWriteTest)\n```python\nimport pytest\nfrom your_module import game_of_life  # Assuming the function is in 'your_module.py'\ndef test_edge_cells():\n    board = [\n        [1, 0, 0],\n        [0, 0, 0],\n        [0, 0, 1]\n    ]\n    expected = [\n        [0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0]\n    ]\n    assert game_of_life(board) == expected\ndef test_corner_cell_alive():\n    board = [\n        [1, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0]\n    ]\n    expected = [\n        [0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0]\n    ]\n    assert game_of_life(board) == expected\ndef test_cells_on_edge_grow():\n    board = [\n        [0, 1, 0],\n        [1, 0, 1],\n        [0, 1, 0]\n    ]\n    expected = [\n        [0, 1, 0],\n        [1, 0, 1],\n        [0, 1, 0]\n    ]\n    assert game_of_life(board) == expected\ndef test_corner_cell_growth():\n    board = [\n        [1, 1, 0],\n        [1, 0, 0],\n        [0, 0, 0]\n    ]\n    expected = [\n        [1, 1, 0],\n        [1, 1, 0],\n        [0, 0, 0]\n    ]\n    assert game_of_life(board) == expected\ndef test_edge_cell_dies():\n    board = [\n        [0, 0, 0],\n        [1, 0, 0],\n        [0, 0, 0]\n    ]\n    expected = [\n        [0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0]\n    ]\n    assert game_of_life(board) == expected\n```\n2025-01-17 11:40:45.814 | INFO     | metagpt.roles.role:_act:391 - Charlie(SimpleReviewer): to do SimpleWriteReview(SimpleWriteReview)",
  "timestamp": "2025-01-17 11:40:12",
  "cost": 0.083,
  "log_file": "logs/24.txt"
}