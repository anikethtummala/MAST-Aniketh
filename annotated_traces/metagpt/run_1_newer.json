{
  "run_id": 1,
  "prompt": "write playable 2048 game",
  "content": "2025-01-12 14:37:42.009 | INFO     | metagpt.roles.role:_act:391 - Alice(SimpleCoder): to do SimpleWriteCode(SimpleWriteCode)\n```python\nimport random\nimport curses\ndef main(stdscr):\n    curses.curs_set(0)\n    sh, sw = stdscr.getmaxyx()\n    w = curses.newwin(sh, sw, 0, 0)\n    w.keypad(1)\n    w.timeout(100)\n    def start_game():\n        return [[0 for _ in range(4)] for _ in range(4)]\n    def add_two(mat):\n        r = random.randint(0, 3)\n        c = random.randint(0, 3)\n        while(mat[r][c] != 0):\n            r = random.randint(0, 3)\n            c = random.randint(0, 3)\n        mat[r][c] = 2\n    def game_state(mat):\n        for i in range(4):\n            for j in range(4):\n                if mat[i][j] == 2048:\n                    return 'WIN'\n        for i in range(4):\n            for j in range(4):\n                if mat[i][j] == 0:\n                    return 'CONTINUE'\n        for i in range(3):\n            for j in range(3):\n                if mat[i][j] == mat[i + 1][j] or mat[i][j] == mat[i][j + 1]:\n                    return 'CONTINUE'\n        for j in range(3):\n            if mat[3][j] == mat[3][j + 1]:\n                return 'CONTINUE'\n        for i in range(3):\n            if mat[i][3] == mat[i + 1][3]:\n                return 'CONTINUE'\n        return 'LOSE'\n    def compress(mat):\n        changed = False\n        new_mat = [[0 for _ in range(4)] for _ in range(4)]\n        for i in range(4):\n            pos = 0\n            for j in range(4):\n                if mat[i][j] != 0:\n                    new_mat[i][pos] = mat[i][j]\n                    if j != pos:\n                        changed = True\n                    pos += 1\n        return new_mat, changed\n    def merge(mat):\n        changed = False\n        for i in range(4):\n            for j in range(3):\n                if mat[i][j] == mat[i][j + 1] and mat[i][j] != 0:\n                    mat[i][j] = mat[i][j] * 2\n                    mat[i][j + 1] = 0\n                    changed = True\n        return mat, changed\n    def reverse(mat):\n        new_mat = []\n        for i in range(4):\n            new_mat.append([])\n            for j in range(4):\n                new_mat[i].append(mat[i][3 - j])\n        return new_mat\n    def transpose(mat):\n        new_mat = []\n        for i in range(4):\n            new_mat.append([])\n            for j in range(4):\n                new_mat[i].append(mat[j][i])\n        return new_mat\n    def move_left(grid):\n        new_grid, changed1 = compress(grid)\n        new_grid, changed2 = merge(new_grid)\n        changed = changed1 or changed2\n        new_grid, temp = compress(new_grid)\n        return new_grid, changed\n    def move_right(grid):\n        new_grid = reverse(grid)\n        new_grid, changed = move_left(new_grid)\n        new_grid = reverse(new_grid)\n        return new_grid, changed\n    def move_up(grid):\n        new_grid = transpose(grid)\n        new_grid, changed = move_left(new_grid)\n        new_grid = transpose(new_grid)\n        return new_grid, changed\n    def move_down(grid):\n        new_grid = transpose(grid)\n        new_grid, changed = move_right(new_grid)\n        new_grid = transpose(new_grid)\n        return new_grid, changed\n    mat = start_game()\n    add_two(mat)\n    add_two(mat)\n    while True:\n        w.clear()\n        for i in range(4):\n            for j in range(4):\n                w.addstr(i*2, j*5, str(mat[i][j]))\n        w.refresh()\n        key = w.getch()\n        if key == curses.KEY_LEFT:\n            mat, changed = move_left(mat)\n            if changed:\n                add_two(mat)\n        elif key == curses.KEY_RIGHT:\n            mat, changed = move_right(mat)\n            if changed:\n                add_two(mat)\n        elif key == curses.KEY_UP:\n            mat, changed = move_up(mat)\n            if changed:\n                add_two(mat)\n        elif key == curses.KEY_DOWN:\n            mat, changed = move_down(mat)\n            if changed:\n                add_two(mat)\n        state = game_state(mat)\n        if state == 'WIN':\n            w.addstr(0, 0, \"You've won!\")\n            w.refresh()\n            w.getch()\n            break\n        elif state == 'LOSE':\n            w.addstr(0, 0, \"Game Over!\")\n            w.refresh()\n            w.getch()\n            break\ncurses.wrapper(main)\n```\n2025-01-12 14:38:04.829 | INFO     | __main__:_act:85 - Bob(SimpleTester): to do SimpleWriteTest(SimpleWriteTest)\n```python\nimport pytest\nfrom SimpleCoder import compress, merge, reverse, transpose, move_left\ndef test_compress():\n    mat = [[2, 0, 2, 0], [4, 4, 0, 0], [2, 0, 0, 2], [0, 0, 0, 0]]\n    expected = ([[2, 2, 0, 0], [4, 4, 0, 0], [2, 2, 0, 0], [0, 0, 0, 0]], True)\n    assert compress(mat) == expected\ndef test_merge():\n    mat = [[2, 2, 0, 0], [4, 4, 0, 0], [2, 2, 0, 0], [0, 0, 0, 0]]\n    expected = ([[4, 0, 0, 0], [8, 0, 0, 0], [4, 0, 0, 0], [0, 0, 0, 0]], True)\n    assert merge(mat) == expected\ndef test_reverse():\n    mat = [[2, 0, 2, 0], [0, 4, 0, 4], [2, 0, 0, 2], [0, 0, 0, 0]]\n    expected = [[0, 2, 0, 2], [4, 0, 4, 0], [2, 0, 0, 2], [0, 0, 0, 0]]\n    assert reverse(mat) == expected\ndef test_transpose():\n    mat = [[2, 0, 2, 0], [0, 4, 0, 4], [2, 0, 0, 2], [0, 0, 0, 0]]\n    expected = [[2, 0, 2, 0], [0, 4, 0, 0], [2, 0, 0, 0], [0, 4, 2, 0]]\n    assert transpose(mat) == expected\ndef test_move_left():\n    mat = [[2, 0, 2, 0], [0, 4, 0, 4], [2, 0, 0, 2], [4, 4, 4, 4]]\n    expected = ([[4, 0, 0, 0], [8, 0, 0, 0], [4, 0, 0, 0], [8, 8, 0, 0]], True)\n    assert move_left(mat) == expected\n```\n2025-01-12 14:38:20.047 | INFO     | metagpt.roles.role:_act:391 - Charlie(SimpleReviewer): to do SimpleWriteReview(SimpleWriteReview)\n2025-01-12 14:38:24.108 | INFO     | __main__:_act:85 - Bob(SimpleTester): to do SimpleWriteTest(SimpleWriteTest)\n```python\nimport pytest\nfrom SimpleCoder import move_right, move_up, move_down, add_two, game_state\ndef test_move_right():\n    mat = [[0, 0, 2, 2], [0, 4, 4, 0], [2, 0, 2, 0], [4, 4, 4, 4]]\n    expected = ([[0, 0, 0, 4], [0, 0, 0, 8], [0, 0, 0, 4], [0, 0, 8, 8]], True)\n    assert move_right(mat) == expected\ndef test_move_up():\n    mat = [[4, 0, 0, 0], [4, 0, 2, 0], [0, 0, 2, 0], [0, 0, 0, 0]]\n    expected = ([[8, 0, 4, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], True)\n    assert move_up(mat) == expected\ndef test_move_down():\n    mat = [[4, 0, 0, 0], [4, 0, 2, 0], [0, 0, 2, 0], [0, 0, 0, 0]]\n    expected = ([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [8, 0, 4, 0]], True)\n    assert move_down(mat) == expected\ndef test_add_two():\n    mat = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\n    add_two(mat)\n    non_zero_count = sum(x.count(2) for x in mat)\n    assert non_zero_count == 1\ndef test_game_state_continue():\n    mat = [[2, 4, 8, 16], [32, 64, 128, 256], [512, 1024, 2, 4], [8, 16, 32, 64]]\n    assert game_state(mat) == 'CONTINUE'\n```\n2025-01-12 14:38:37.417 | INFO     | metagpt.roles.role:_act:391 - Charlie(SimpleReviewer): to do SimpleWriteReview(SimpleWriteReview)",
  "timestamp": "2025-01-12 14:37:42",
  "cost": 0.148,
  "log_file": "logs/1.txt"
}