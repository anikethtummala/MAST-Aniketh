{
  "run_id": 13,
  "prompt": "build a web scraper to collect product prices from e-commerce sites",
  "content": "2025-01-17 11:33:13.105 | INFO     | metagpt.roles.role:_act:391 - Alice(SimpleCoder): to do SimpleWriteCode(SimpleWriteCode)\n```python\nimport requests\nfrom bs4 import BeautifulSoup\ndef scrape_product_price(url, css_selector):\n    \"\"\"\n    Scrapes the product price from a given e-commerce website URL using the specified CSS selector.\n    Parameters:\n    - url (str): The URL of the product page.\n    - css_selector (str): The CSS selector to locate the price on the page.\n    Returns:\n    - str: The scraped price or an error message if the price could not be found.\n    \"\"\"\n    try:\n        # Send a GET request to the URL\n        response = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'})\n        # Raise an exception if the request was unsuccessful\n        response.raise_for_status()\n        # Parse the HTML content of the page\n        soup = BeautifulSoup(response.text, 'html.parser')\n        # Find the price using the provided CSS selector\n        price_element = soup.select_one(css_selector)\n        # Return the text content of the price element, or an error message if not found\n        if price_element:\n            return price_element.text.strip()\n        else:\n            return \"Price not found.\"\n    except Exception as e:\n        return f\"An error occurred: {e}\"\n```\n2025-01-17 11:33:21.129 | INFO     | __main__:_act:85 - Bob(SimpleTester): to do SimpleWriteTest(SimpleWriteTest)\n```python\nimport pytest\nfrom your_module import scrape_product_price  # Assuming the function is in 'your_module.py'\ndef test_price_found():\n    # Assuming there's a stable page & CSS selector for testing\n    assert scrape_product_price(\"https://example.com/product-page\", \".product-price\") == \"$9.99\"\ndef test_price_not_found():\n    # Correct page but incorrect CSS selector\n    assert scrape_product_price(\"https://example.com/product-page\", \".wrong-selector\") == \"Price not found.\"\ndef test_invalid_url():\n    # Invalid URL\n    assert \"An error occurred:\" in scrape_product_price(\"https://thispagedoesnotexist.com\", \".product-price\")\ndef test_empty_url():\n    # Empty URL\n    assert \"An error occurred:\" in scrape_product_price(\"\", \".product-price\")\ndef test_empty_css_selector():\n    # Correct URL but empty CSS selector\n    assert scrape_product_price(\"https://example.com/product-page\", \"\") == \"Price not found.\"\n```\n2025-01-17 11:33:27.118 | INFO     | metagpt.roles.role:_act:391 - Charlie(SimpleReviewer): to do SimpleWriteReview(SimpleWriteReview)\n2025-01-17 11:33:31.935 | INFO     | __main__:_act:85 - Bob(SimpleTester): to do SimpleWriteTest(SimpleWriteTest)\n```python\nimport pytest\nfrom unittest.mock import patch\nfrom your_module import scrape_product_price\n@patch(\"your_module.requests.get\")\ndef test_price_found(mock_get):\n    mock_get.return_value.status_code = 200\n    mock_get.return_value.text = '<html><body><div class=\"product-price\">$9.99</div></body></html>'\n    assert scrape_product_price(\"https://example.com/product-page\", \".product-price\") == \"$9.99\"\n@patch(\"your_module.requests.get\")\ndef test_price_not_found(mock_get):\n    mock_get.return_value.status_code = 200\n    mock_get.return_value.text = '<html><body><div class=\"wrong-selector\">$9.99</div></body></html>'\n    assert scrape_product_price(\"https://example.com/product-page\", \".product-price\") == \"Price not found.\"\n@patch(\"your_module.requests.get\")\ndef test_invalid_url(mock_get):\n    mock_get.side_effect = Exception(\"An error occurred\")\n    assert \"An error occurred:\" in scrape_product_price(\"https://thispagedoesnotexist.com\", \".product-price\")\n@patch(\"your_module.requests.get\")\ndef test_empty_url(mock_get):\n    mock_get.side_effect = Exception(\"An error occurred\")\n    assert \"An error occurred:\" in scrape_product_price(\"\", \".product-price\")\n@patch(\"your_module.requests.get\")\ndef test_empty_css_selector(mock_get):\n    mock_get.return_value.status_code = 200\n    mock_get.return_value.text = '<html><body><div class=\"product-price\">$9.99</div></body></html>'\n    assert scrape_product_price(\"https://example.com/product-page\", \"\") == \"Price not found.\"\n```\n2025-01-17 11:33:41.344 | INFO     | metagpt.roles.role:_act:391 - Charlie(SimpleReviewer): to do SimpleWriteReview(SimpleWriteReview)",
  "timestamp": "2025-01-17 11:33:13",
  "cost": 0.061,
  "log_file": "logs/13.txt"
}